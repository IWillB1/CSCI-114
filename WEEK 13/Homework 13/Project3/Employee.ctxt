#BlueJ class context
comment0.target=Employee
comment0.text=\n\ <h2>Employee.java\ -\ represents\ a\ person\ who\ is\ employed</h2>\n\n\ <h3>Instance\ variables\:</h3>\n\n\ <ul>\n\ \ \ \ \ <li><b>int</b>\ ssn\ -\ Social\ Security\ Number\n\ \ \ \ \ <li><b>int</b>\ salary\ -\ How\ much\ moola\ they\ are\ brining\ home\n\ </ul>\n\n\ @author\ Will\ Bouasisavath\n\ @version\ Homework\ 13,\ Project\ 3\n
comment1.params=
comment1.target=Employee()
comment1.text=\n\ Null\ constructor\n
comment2.params=ssn
comment2.target=void\ setSSN(java.lang.String)
comment2.text=\n\ Setter\ for\ <code>SSN</code>\n\ @param\ ssn\ -\ User\ input\ for\ SSN\n\ @throws\ SSNLengthException\ -\ if\ length\ is\ not\ 9\n\ @throws\ SSNCharacterException\ -\ if\ contains\ any\ non-numeric\ characters\n\ <br>\n\ <h2>Algorithm</h2>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <ol>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <li>Create\ variable\ <code>len</code>\ set\ to\ the\ length\ of\ <code>ssn</code>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <li>If\ <code>len</code>\ is\ not\ equal\ to\ 9,\ throw\ <code>SSNLengthException</code>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <li>Try\ <code>parseInt</code>,\ catch\ with\ a\ <code>NumberFormatException</code>,\ throwing\ a\ new\ <code>SSNCharacterException</code>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <li>set\ <code>this.ssn</code>\ to\ the\ <code>parseInt</code>\ with\ <code>ssn</code>\ as\ a\ parameter\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ </ol>\n
comment3.params=salary
comment3.target=void\ setSalary(java.lang.String)
comment3.text=\n\ Setter\ for\ <code>salary</code>\n\ @param\ salary\ -\ User\ input\ for\ salary\n\ @throws\ InvalidSalaryText\ -\ if\ contains\ any\ non-numeric\ characters\n\ @throws\ InvalidSalaryOption\ -\ if\ contains\ a\ negative,\ slightly\ redundant\ but\ also\ unique.\n\ <br>\n\ <h2>Algorithm</h2>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <ol>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <li>If\ the\ first\ slot\ in\ the\ string\ is\ a\ '-',\ throw\ a\ new\ <code>InvalidSalaryOption</code>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <li>Try\ to\ <code>parseInt</code>\ with\ <code>salary</code>\ as\ paramater,\ catch\ with\ <code>NumberFormatException</code>,\ throwing\ new\ <code>InvalidSalaryText</code>\ exception\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <li>Set\ <code>this.salary</code>\ to\ the\ <code>parseInt</code>\ with\ <code>salary</code>\ as\ paramater\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ </ol>\n
comment4.params=
comment4.target=int\ getSsn()
comment4.text=\n\ Getter\ for\ SSN\n\ @return\ ssn\n
comment5.params=
comment5.target=int\ getSalary()
comment5.text=\n\ Getter\ for\ salary\n\ @return\ salary\n
comment6.params=o
comment6.target=boolean\ equals(java.lang.Object)
comment6.text=\n\ Evaluating\ if\ two\ objects\ are\ the\ same\n\ @param\ o\ -\ Object\ that\ is\ cast\ into\ a\ <code>Employee</code>,\ compared\ with\n\ @return\ <b>true</b>\ if\ equal,\ <b>false</b>\ if\ not\ equal\n
comment7.params=
comment7.target=java.lang.String\ toString()
comment7.text=\n\ Compiles\ a\ string\ with\ useful\ values\n\ @return\ <b>String</b>\ with\ <code>super.toString</code>\ along\ with\ variables\ from\ <code>Employee</code>\ class\n
numComments=8
