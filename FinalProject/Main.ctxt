#BlueJ class context
comment0.target=Main
comment0.text=\n\ <h2>Main.java\ -\ Interface\ and\ calculations\ for\ KITT\ Robotics\ Scouting\ System</h2>\n\ <h3>Problem\ Statement\:</h3>\n\ <p>Create\ a\ system\ that\ inputs,\ displays\ and\ outputs\ useful\ information\ about\ robots\ from\ the\ 2020\ Los\ Angeles\ North\ Competition.\n\ \ \ \ The\ system\ must\ include\ 3\ classes\ and\ a\ main\ method\ in\ one,\ inheritance,\ polymorphism,\ and\ text\ file\ I/O.\ </p>\n\n\ <p>Algorithm\:</p>\n\ <p>In\ main\:</p>\n\ <ol>\n\ \ \ \ \ <li>\ Create\ an\ <b>array</b>\ of\ <code>RobotStats</code>\ with\ 8\ slots\n\ \ \ \ \ <li>\ Create\ a\ <b>scanner</b>\ named\ <code>in</code>\n\ \ \ \ \ <li>\ Ask\ the\ user\ for\ an\ input\ file,\ loading\ the\ value\ of\ it\ as\ a\ parameter\ while\ invoking\ into\ <code>readAndPopulateArray</code>\ along\ with\ <code>array</code>\n\ \ \ \ \ <li>\ Ask\ the\ user\ for\ an\ output\ file,\ loading\ the\ value\ of\ it\ as\ a\ parameter\ while\ invoking\ the\ method\ <code>generateReport</code>\ along\ with\ <code>array</code>\n\ </ol>\n\n\ @author\ Will\ Bouasisavath\n\ @version\ Final\ Project\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment2.params=file\ array
comment2.target=void\ readAndPopulateArray(java.lang.String,\ Robot[])
comment2.text=\n\ Reading\ a\ file,\ populating\ an\ array\ from\ it\ (example\ of\ text\ file\ I/O)\n\ @param\ file\ -\ Location\ of\ the\ file\ it\ is\ reading\n\ @param\ array\ -\ Array\ to\ populate\n\ @throws\ Exception\ -\ If\ something\ breaks\n\n\ <p>Algorithm\:</p>\n\ <ol>\n\ \ \ \ \ <li>\ Try\ to\ do\ the\ following\n\ \ \ \ \ <ul>\n\ \ \ \ \ \ \ \ \ <li>Create\ a\ <code>FileInputStream</code>,\ and\ a\ <code>Scanner</code>\ using\ <code>file</code>\n\ \ \ \ \ \ \ \ \ <li>Loop\ through\ file\ while\ <code>scanner</code>\ has\ next\ line,\ creating\ a\ <code>RobotStats</code>\ loaded\ with\ next\ lines\ from\ the\ file,\ pushing\ it\ into\ <code>array</code>\n\ \ \ \ \ \ \ \ \ <li>Increase\ <code>rs</code>\ each\ iteration\n\ \ \ \ \ </ul>\n\ \ \ \ \ <li>\ Otherwise\ catch\ with\ the\ following\n\ \ \ \ \ <ul>\n\ \ \ \ \ \ \ \ \ <li>Display\ the\ error\ message\n\ \ \ \ \ \ \ \ \ <li>Create\ a\ <code>scanner</code>\ with\ <code>System.in</code>\n\ \ \ \ \ \ \ \ \ <li>Ask\ the\ user\ for\ a\ new\ file,\ invoking\ the\ method\ again\ with\ the\ users\ input\ as\ the\ <code>file</code>\ parameter\n\ \ \ \ \ </ul>\n\ </ol>\n
comment3.params=file\ array
comment3.target=void\ generateReport(java.lang.String,\ RobotStats[])
comment3.text=\n\ Method\ to\ generate\ scouting\ report,\ output\ to\ file\ given\n\ @param\ file\ -\ File\ name\n\ @param\ array\ -\ Array\ used\ to\ generate\ the\ scouting\ report\n\ @throws\ Exception\ -\ If\ something\ breaks\n\ <ol>\n\ <p>Algorithm\:</p>\n\ <li>\ Try\ the\ following\n\ <ul>\n\ \ \ \ \ <li>Create\ a\ <code>PrintWriter</code>\ with\ <code>file</code>\ as\ the\ paramter\n\ \ \ \ \ <li>Let\ the\ user\ know\ the\ file\ has\ been\ established\n\ \ \ \ \ <li>Input\ a\ header\ into\ the\ file\n\ \ \ \ \ <li>Input\ the\ NPR\ by\ calling\ the\ <code>npr</code>\ method\ and\ adding\ a\ statement\ into\ the\ file\n\ \ \ \ \ <li>Input\ the\ best\ climbing\ robot\ by\ calling\ the\ <code>bestClimb</code>\ method\ and\ adding\ a\ statement\ into\ the\ file\n\ \ \ \ \ <li>Input\ the\ best\ ball\ robot\ by\ calling\ the\ <code>bestBall</code>\ method\ and\ adding\ a\ statement\ into\ the\ file\n\ \ \ \ \ <li>Let\ the\ user\ know\ that\ everything\ has\ been\ added,\ and\ then\ close\ the\ <code>PrintWriter</code>\n\ </ul>\n\ <li>\ Otherwise\ catch\ with\ the\ following\n\ <ul>\n\ \ \ \ \ \ <li>Display\ the\ error\ message\n\ \ \ \ \ \ <li>Create\ a\ <code>scanner</code>\ with\ <code>System.in</code>\n\ \ \ \ \ \ <li>Ask\ the\ user\ for\ a\ new\ file,\ invoking\ the\ method\ again\ with\ the\ users\ input\ as\ the\ <code>file</code>\ parameter\n\ </ul>\n\ </ol>\n
comment4.params=array
comment4.target=int\ bestBall(RobotStats[])
comment4.text=\n\ Find\ the\ robot\ who\ scored\ the\ highest\ amount\ of\ balls\n\ @param\ array\ -\ Array\ full\ of\ robots\n\ @return\ the\ <code>index</code>\ of\ the\ robot\ with\ the\ highest\ ball\ score\n\n\ <p>Algorithm\:</p>\n\ <ol>\n\ \ \ \ \ <li>Create\ a\ <b>int</b>\ called\ <code>index</code>\ set\ to\ 0\n\ \ \ \ \ <li>Loop\ for\ <b>int</b>\ <code>i</code>,\ while\ <code>i</code>\ is\ less\ than\ <code>rs</code>,\ increasing\ i\ each\ iteration\n\ \ \ \ \ <ul>\n\ \ \ \ \ \ \ \ \ <li>If\ the\ <code>getBallsScore</code>\ of\ the\ array\ at\ index\ <code>i</code>\ is\ greater\ than\ the\ index\ at\ <code>index</code>,\ set\ <code>index</code>\ to\ <code>i</code>\n\ \ \ \ \ </ul>\n\ \ \ \ \ <li>\ Return\ <code>index</code>\n\ </ol>\n
comment5.params=array
comment5.target=int\ npr(RobotStats[])
comment5.text=\n\ Method\ to\ find\ the\ robot\ with\ the\ highest\ NPR\ score\n\ @param\ array\ -\ Array\ to\ read\ through\n\ @return\ the\ <code>nprScore</code>\ with\ <code>array</code>\ and\ <code>rt</code>\ as\ parameters\ respectively\n\n\ <p>Algorithm\:</p>\n\ <ol>\n\ \ \ \ \ <li>Loop\ for\ <b>int</b>\ <code>i</code>,\ while\ <code>i</code>\ is\ less\ than\ <code>rs</code>,\ increasing\ i\ each\ iteration\n\ \ \ \ \ <ul>\n\ \ \ \ \ \ \ \ \ <li>If\ the\ <code>nprScore</code>\ of\ the\ array\ and\ <code>i</code>\ is\ greater\ than\ the\ index\ and\ <code>rt</code>,\ set\ <code>rt</code>\ to\ <code>i</code>\n\ \ \ \ \ </ul>\n\ \ \ \ \ <li>Return\ the\ <code>nprScore</code>\ of\ <code>array</code>\ and\ <code>rt</code>\n\ </ol>\n
comment6.params=array\ i
comment6.target=int\ nprScore(RobotStats[],\ int)
comment6.text=\n\ Calculate\ the\ KITT\ Power\ Ranking\ Score\ based\ on\ values\ extracted\ from\ the\ given\ array,\ at\ index\ <code>i</code>\n\ @param\ array\ -\ Array\ of\ <code>RobotStats</code>\ that\ will\ be\ accessed\n\ @param\ i\ -\ Index\ of\ the\ array\ that\ will\ be\ accessed\n\ @return\ <code>score</code>\ -\ The\ NPR\ score\ for\ the\ given\ robot\n\n\ <p>Algorithm\:</p>\n\ <ul>\n\ \ \ \ \ <li>Create\ an\ <b>int</b>\ named\ <code>score</code>\n\ \ \ \ \ <li>Create\ a\ <code>RobotStats</code>\ object\ named\ robot\ set\ equal\ to\ <code>array</code>\ at\ index\ <code>i</code>\n\ \ \ \ \ <li>If\ the\ robot\ is\ functional,\ add\ 500\ to\ <code>score</code>\n\ \ \ \ \ <li>If\ the\ robot\ is\ tall,\ add\ 50\ to\ <code>score</code>\n\ \ \ \ \ <li>If\ the\ robot\ can\ climb,\ add\ 250\ times\ the\ climb\ percentage\ (out\ of\ 10)\ to\ <code>score</code>\n\ \ \ \ \ <li>If\ the\ robot\ can\ translate\ (\#TranslatorClimbGang),\ add\ 100\ to\ <code>score</code>\n\ \ \ \ \ <li>If\ the\ robot\ can\ shoot,\ add\ 100\ times\ its\ shooting\ percentage\ to\ <code>score</code>\n\ \ \ \ \ <li>Return\ score\n\ </ul>\n
comment7.params=array
comment7.target=int\ bestClimb(RobotStats[])
comment7.text=\n\ Method\ to\ find\ the\ robot\ with\ the\ best\ climb\ score\ from\ a\ given\ array\n\ @param\ array\ -\ The\ array\ with\ <code>RobotStats</code>\n\ @return\ <code>index</code>\ -\ The\ index\ for\ the\ robot\ with\ the\ highest\ climb\ score\n\n\ <p>Algorithm\:</p>\n\ <ol>\n\ \ \ \ \ <li>Create\ a\ <b>int</b>\ called\ <code>index</code>\ set\ to\ 0\n\ \ \ \ \ <li>Loop\ for\ <b>int</b>\ <code>i</code>,\ while\ <code>i</code>\ is\ less\ than\ <code>rs</code>,\ increasing\ i\ each\ iteration\n\ \ \ \ \ <ul>\n\ \ \ \ \ \ \ \ \ <li>If\ the\ <code>getClimbs</code>\ of\ the\ array\ at\ index\ <code>i</code>\ is\ greater\ than\ the\ index\ at\ <code>index</code>,\ set\ <code>index</code>\ to\ <code>i</code>\n\ \ \ \ \ </ul>\n\ \ \ \ \ <li>\ Return\ <code>index</code>\n\ </ol>\n
numComments=8
